syntax = "proto3";
package chat;
// DÃ©finition d'une Ã©numÃ©ration pour reprÃ©senter le statut d'un utilisateur
enum UserStatus {
UNKNOWN = 0; // Statut inconnu (valeur par dÃ©faut)
ACTIVE = 1; // Utilisateur actif
INACTIVE = 2; // Utilisateur inactif
}
// Message reprÃ©sentant un utilisateur
message User {
string id = 1; // Identifiant unique de l'utilisateur
string name = 2; // Nom de l'utilisateur
string email = 3; // Adresse email
UserStatus status = 4; // Statut de l'utilisateur (valeurs dÃ©finies dans l'enum)
}
// Message reprÃ©sentant un message de chat
message ChatMessage {
string id = 1; // Identifiant du message
string room_id = 2; // Identifiant de la salle de chat
string sender_id = 3; // Identifiant de l'expÃ©diteur
string content = 4; // Contenu du message
}
// Message de requÃªte pour rÃ©cupÃ©rer un utilisateur
message GetUserRequest {
string user_id = 1; // Identifiant de l'utilisateur Ã  rÃ©cupÃ©rer
}
// Message de rÃ©ponse contenant les informations d'un utilisateur
message GetUserResponse {
User user = 1; // L'utilisateur correspondant Ã  la requÃªte
}
// Message utilisÃ© pour le streaming de chat.
// L'utilisation de "oneof" permet d'Ã©tendre le schÃ©ma en ajoutant d'autrestypes d'Ã©vÃ©nements ultÃ©rieurement.
message ChatStream {
oneof payload {
ChatMessage chat_message = 1; // Un message de chat
}
}
// DÃ©finition du service gRPC avec deux mÃ©thodes :
// - GetUser pour obtenir les infos d'un utilisateur
// - Chat pour le streaming bidirectionnel de messages de chat
service ChatService {
rpc GetUser(GetUserRequest) returns (GetUserResponse);
rpc Chat(stream ChatStream) returns (stream ChatStream);
rpc GetChatHistory(GetChatHistoryRequest) returns (GetChatHistoryResponse); // ğŸ‘ˆ

}
// RequÃªte pour l'historique
message GetChatHistoryRequest {
  string room_id = 1;
}

// RÃ©ponse avec une liste de messages
message GetChatHistoryResponse {
  repeated ChatMessage messages = 1;
}

